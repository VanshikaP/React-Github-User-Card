{"version":3,"sources":["components/UserCard.js","components/UserForm.js","App.js","serviceWorker.js","index.js"],"names":["UserCard","state","username","props","userData","followers","followers_display","following","following_display","repos","handleFollowersDisplay","setState","handleFollowingDisplay","Axios","get","this","then","response","console","log","data","catch","err","message","prevProps","prevState","followers_url","length","login","Container","maxWidth","className","src","avatar_url","alt","name","href","html_url","onClick","map","follower","Component","UserForm","handleChange","e","target","value","handleSubmit","preventDefault","updateUsername","TextField","label","variant","onChange","required","Button","color","type","App","user","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.44abbbb3.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Axios from 'axios';\n\nimport Container from '@material-ui/core/Container'\n\n// import {GitHubCalendar} from 'github-calendar'\n\nclass UserCard extends Component {\n   state = {\n            username: this.props.username === '' ? 'VanshikaP' : this.props.username,\n            userData: [],\n            followers: [],\n            followers_display: false,\n            following: [],\n            following_display: false,\n            repos: []\n        }\n    componentDidMount(){\n        //Setting UserData\n        Axios.get(`https://api.github.com/users/${this.state.username}`)\n        .then(response => {\n            console.log(response.data);\n            this.setState({\n                ...this.state, userData: response.data\n            })\n        })\n        .catch(err => console.log('Error ', err.message))  \n        console.log('Props here', this.props);     \n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // console.log('Previous: ', Object.keys(prevState.userData).length, 'Current: ', Object.keys(this.state.userData).length)\n        if(prevProps.username !== this.props.username){\n            console.log('Props here', this.props); \n            this.setState({\n                ...this.state,\n                username: this.props.username\n            })\n        }\n        if(prevState.userData !== this.state.userData){\n\n            //Setting User Data\n            Axios.get(`https://api.github.com/users/${this.state.username}`)\n            .then(response => {\n                console.log(response.data);\n                this.setState({\n                    ...this.state, userData: response.data\n                })\n            })\n            .catch(err => console.log('Error ', err.message))  \n\n             // Setting Followers\n\n            Axios.get(this.state.userData.followers_url)\n            .then(response => {\n                this.setState({\n                    ...this.state, followers: response.data\n                })\n                console.log('No. of Followers', response.data.length)\n            })\n            .catch(err => console.log('Error', err.message));\n\n            // Setting Following\n\n            Axios.get(`https://api.github.com/users/${this.state.userData.login}/following`)\n            .then(response => {\n                this.setState({\n                    ...this.state, following: response.data\n                })\n                console.log('No. of Following', response.data.length)\n            })\n            .catch(err => console.log('Error', err.message));\n        }\n    }\n\n    handleFollowersDisplay = () => {\n        this.setState({\n            ...this.state,\n            followers_display: !this.state.followers_display\n        })\n    }\n\n    handleFollowingDisplay = () => {\n        this.setState({\n            ...this.state,\n            following_display: !this.state.following_display\n        })\n    }\n\n    render() {\n        console.log('user data', this.state)\n        return (\n            <Container maxWidth='md' className='user-container'>\n                \n                <Container className = 'info'>\n                    <img className='info-img' src={this.state.userData.avatar_url} alt={`${this.state.userData.name}`} />\n                    <Container className='info-text'>\n                        <h2>{this.state.userData.name}</h2>\n                        <p>GitHub Username: {this.state.userData.login} </p>\n                        <p>Profile: <a href={this.state.userData.html_url}>{this.state.userData.html_url}</a></p>\n                    </Container>\n                </Container>\n\n                <Container className='people'>\n                    <Container maxWidth='md' className='followers'>\n                        <p> {this.state.followers.length} <span className='people-display' onClick={this.handleFollowersDisplay}>followers</span></p>\n                        <div className={`people-div ${!this.state.followers_display ? ' close' : ''}`}>\n                            {this.state.followers.map(follower => {\n                                return (\n                                    <div className='people-card'>\n                                        <img className='people-img' src={follower.avatar_url} alt={follower.login} />\n                                        <a href={follower.html_url}>{follower.login}</a>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </Container>\n                    <Container maxWidth='md' className='following'>\n                        <p> {this.state.following.length} <span className='people-display' onClick={this.handleFollowingDisplay}>following</span></p>\n                        <div className={`people-div ${!this.state.following_display ? ' close' : ''}`}>\n                            {this.state.following.map(following => {\n                                return (\n                                    <div className='people-card'>\n                                        <img className='people-img' src={following.avatar_url} alt={following.login} />\n                                        <a href={following.html_url}>{following.login}</a>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </Container>\n                </Container>\n                <Container className='git-chart'>\n                    <img className='git-chart-img' src={`https://ghchart.rshah.org/409ba5/${this.state.userData.login}`} alt={`${this.state.userData.name}'s Github chart`} />\n                    {/* {new GitHubCalendar('calendar', 'VanshikaP')} */}\n                    <h3>Contribution Chart</h3>\n                </Container>\n            </Container>\n        )\n    }\n}\n\nexport default UserCard\n\n// USING FUNCTION AND HOOKS\n\n// import React, {useState, useEffect} from 'react'\n// import Axios from 'axios'\n\n// function UserCard(props) {\n//     const [followers, setFollowers] = useState(0);\n//     const [following, setFollowing] = useState(0);\n\n\n//     // Setting Followers and Following\n//     useEffect(() => {\n//         Axios.get(props.userData.followers_url)\n//         .then(response => {\n//             console.log('response recieved', response.data.length);\n//             setFollowers(response.data.length)\n//             console.log('No. of Followers', response.data.length)\n//         })\n//         .catch(err => console.log('Error', err.message));\n\n//         Axios.get(`https://api.github.com/users/${props.userData.login}/following`)\n//         .then(response => {\n//             console.log('response recieved', response.data.length);\n//             setFollowing(response.data.length)\n//             console.log('No. of Following', response.data.length)\n//         })\n//         .catch(err => console.log('Error', err.message));\n//     }, [props.userData])\n\n//     return (\n//         <div className='user-container'>\n//             <img className='user-img' src={this.state.userData.avatar_url} alt={`${this.state.userData.name}'s picture`} />\n//             <h2> {props.userData.name} </h2>\n//             <div className = 'basic'>\n//                 <p>GitHub Username: {props.userData.login} </p>\n//                 <p>Profile: {props.userData.html_url} </p>\n//                 <div className='connections'>\n//                     <p>{followers} followers</p>\n//                     <p>{following} following</p>\n//                 </div>\n//                 <img className='git-chart' src={`https://ghchart.rshah.org/409ba5/${this.state.userData.login}`} alt={`${this.state.userData.name}'s Github chart`} />\n//             </div>\n//         </div>\n//     )\n// }\n\n// export default UserCard\n\n","import React, { Component } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\n\nexport class UserForm extends Component {\n\n    state={\n        username: ''\n    }\n\n    handleChange = e => {\n        this.setState({\n            username: e.target.value\n        })\n    }\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.updateUsername(this.state.username)\n    }\n    render() {\n        return (\n            <form className='user-form'>\n                <p>Want to see your info?</p>\n                <TextField className='user-input' label='Your GitHub Username' variant='outlined' value={this.username} onChange={this.handleChange}required />\n                <Button color='primary' type='submit' variant='contained' onClick={this.handleSubmit}>Show</Button>\n            </form>\n        )\n    }\n}\n\nexport default UserForm\n","import React, {useState} from 'react';\n\nimport UserCard from './components/UserCard'\nimport UserForm from './components/UserForm'\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    username: ''\n  }\n  updateUsername = user => {\n    this.setState({\n      username: user\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>My GitHub Profile</h1>\n        <UserCard username={this.state.username}/>\n        <UserForm updateUsername={this.updateUsername} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import 'github-calendar/dist/github-calendar-responsive.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}